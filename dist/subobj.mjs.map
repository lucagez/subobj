{"version":3,"file":"subobj.mjs","sources":["../src/subobj.js"],"sourcesContent":["const fs = require('fs');\n\nconst isFormatted = string => (string.match('\\n') || []).length > 0;\n\nconst isValid = string => {\n  try {\n    JSON.parse(string);\n    return true;\n  } catch (e) {\n    throw new Error('invalid JSON');\n  }\n};\n\nconst minify = string => {\n  try {\n    return JSON.stringify(JSON.parse(string));\n  } catch (e) {\n    throw new Error('invalid JSON');\n  }\n};\n\nconst find = (string, search) => {\n  const regex = RegExp(`\"${search}\":`, 'g');\n  const accumulator = [];\n  let temp;\n  while ((temp = regex.exec(string)) !== null) {\n    accumulator.push(temp.index);\n  }\n  return accumulator;\n};\n\nconst matchBracket = (string, index, brackets, counter = 0) => {\n  const current = string.charAt(index);\n  if (current === brackets[0]) counter += 1;\n  else if (current === brackets[1]) counter -= 1;\n  if (counter === 0) return index;\n  return matchBracket(string, (index += 1), brackets, counter);\n};\n\nconst parse = (string, index = 0) => {\n  const current = string.charAt(index);\n  if (current === ',' || current === '}') return string.substr(0, index);\n  if (current === '[' || current === '{') {\n    const brackets = current === '[' ? ['[', ']'] : ['{', '}'];\n    return string.substr(0, matchBracket(string, index, brackets)) + brackets[1];\n  }\n  return parse(string, (index += 1));\n};\n\nconst subobj = (string, search, params = {}) => {\n  const { pathMode, validate } = params;\n  const raw = pathMode ? fs.readFileSync(string, 'UTF-8') : string;\n  if (validate) isValid(raw);\n  const data = isFormatted(raw) ? minify(raw) : raw;\n  const matches = find(data, search);\n  return matches.map(index => {\n    const substr = data.substr(index);\n    return `{${parse(substr)}}`;\n  });\n};\n\nmodule.exports = subobj;\n"],"names":["const","fs","require","matchBracket","string","index","brackets","counter","current","charAt","parse","substr","module","exports","search","params","raw","readFileSync","validate","JSON","e","Error","isValid","data","match","length","isFormatted","stringify","minify","temp","regex","RegExp","accumulator","exec","push","find","map"],"mappings":"AAAAA,IAAMC,EAAKC,QAAQ,MA+BbC,WAAgBC,EAAQC,EAAOC,EAAUC,kBAAU,OACjDC,EAAUJ,EAAOK,OAAOJ,UAC1BG,IAAYF,EAAS,GAAIC,GAAW,EAC/BC,IAAYF,EAAS,KAAIC,GAAW,GAC7B,IAAZA,EAAsBF,EACnBF,EAAaC,EAASC,GAAS,EAAIC,EAAUC,IAGhDG,WAASN,EAAQC,kBAAQ,OACvBG,EAAUJ,EAAOK,OAAOJ,MACd,MAAZG,GAA+B,MAAZA,EAAiB,OAAOJ,EAAOO,OAAO,EAAGN,MAChD,MAAZG,GAA+B,MAAZA,EAAiB,KAChCF,EAAuB,MAAZE,EAAkB,CAAC,IAAK,KAAO,CAAC,IAAK,YAC/CJ,EAAOO,OAAO,EAAGR,EAAaC,EAAQC,EAAOC,IAAaA,EAAS,UAErEI,EAAMN,EAASC,GAAS,IAejCO,OAAOC,iBAZST,EAAQU,EAAQC,kBAAS,qBAEjCC,aAAiBf,EAAGgB,aAAab,EAAQ,SAAWA,EACtDc,YAhDUd,OAEZe,KAAKT,MAAMN,GAEX,MAAOgB,SACD,IAAIC,MAAM,iBA2CJC,CAAQN,OAChBO,WAnDYnB,UAAWA,EAAOoB,MAAM,OAAS,IAAIC,OAAS,EAmDnDC,CAAYV,YAxCZZ,cAEJe,KAAKQ,UAAUR,KAAKT,MAAMN,IACjC,MAAOgB,SACD,IAAIC,MAAM,iBAoCcO,CAAOZ,GAAOA,kBAhClCZ,EAAQU,WAGhBe,EAFEC,EAAQC,WAAWjB,OAAY,KAC/BkB,EAAc,GAEmB,QAA/BH,EAAOC,EAAMG,KAAK7B,KACxB4B,EAAYE,KAAKL,EAAKxB,cAEjB2B,EA0BSG,CAAKZ,EAAMT,GACZsB,aAAI/B,OACXM,EAASY,EAAKZ,OAAON,aAChBK,EAAMC"}